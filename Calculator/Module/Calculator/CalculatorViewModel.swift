//Generated by Mota

import Foundation

final class CalculatorViewModel {
    private let mathProvider = MathProvider()
    private let validator = InputValidator()
    var currentText = ""
    weak var delegate: CalculatorViewModelDelegate?

    func userDidInput(value: String) {
        if value == "AC" {
            clearText()
            return
        }
        if value == "=" {
            calculate()
            return
        }
        if value == "CE" {
            if currentText.count == 0 {
                return
            }
            currentText = String(currentText.dropLast())
            updateTextField()
            return
        }

        guard validator.shouldInputValue(value, currentText: currentText) else {
            return
        }

        currentText += value
        updateTextField()
    }

    private func calculate() {
        DispatchQueue.global().async { [weak self] in
            guard let self = self else {
                return
            }
            let result = self.mathProvider.calculate(expression: self.currentText)
            DispatchQueue.main.async {
                self.currentText = "\(result)"
                self.updateTextField()
            }
        }
    }

    private func clearText() {
        currentText = ""
        updateTextField()
    }

    private func updateTextField() {
        delegate?.updateTextField(with: currentText)
    }
}
